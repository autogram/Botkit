"""
This type stub file was generated by pyright.
"""

"""
:class:`asynctest.TestCase` decorator which controls checks performed after
tests.

This module is separated from :mod:`asynctest.case` to avoid circular imports
in modules registering new checks.

To implement new checks:

    * its name must be added in the ``DEFAULTS`` dict,

    * a static method of the same name must be added to the :class:`_fail_on`
      class,

    * an optional static method named ``before_[name of the check]`` can be
      added to :class:`_fail_on` to implement some set-up before the test runs.

A check may be only available on some platforms, activated by a conditional
import. In this case, ``DEFAULT`` and :class:`_fail_on` can be updated in the
module. There is an example in the :mod:`asynctest.selector` module.
"""
_FAIL_ON_ATTR = "_asynctest_fail_on"
DEFAULTS = { "unused_loop": False,"active_handles": False }
class _fail_on:
    def __init__(self, checks=...) -> None:
        ...
    
    def __call__(self, func):
        ...
    
    def update(self, checks, override=...):
        ...
    
    def copy(self):
        ...
    
    def get_checks(self, case):
        ...
    
    def before_test(self, case):
        ...
    
    def check_test(self, case):
        ...
    
    @staticmethod
    def unused_loop(case):
        ...
    
    @classmethod
    def active_handles(cls, case):
        ...
    


def fail_on(**kwargs):
    """
    Enable checks on the loop state after a test ran to help testers to
    identify common mistakes.
    """
    ...

def strict(func=...):
    """
    Activate strict checking of the state of the loop after a test ran.
    """
    ...

def lenient(func=...):
    """
    Deactivate all checks after a test ran.
    """
    ...

